ensureBlockHeightExists :: BlockHeight -> CompactM ()
ensureBlockHeightExists bh = do
  r <- qryNoTemplateM
    "ensureBlockHeightExists.0"
    "SELECT blockheight FROM BlockHistory WHERE blockheight = ?1"
    [bhToSType bh]
    [RInt]
  case r of
    [[SInt rBH]] -> do
      when (fromIntegral bh /= rBH) $ do
        throwM $ CompactExceptionInvalidBlockHeight bh
    _ -> do
      error "ensureBlockHeightExists.0: impossible"

getLatestBlockHeight :: CompactM BlockHeight
getLatestBlockHeight = do
  r <- qryNoTemplateM
    "getLatestBlockHeight.0"
    "SELECT blockheight FROM BlockHistory ORDER BY blockheight DESC LIMIT 1"
    []
    [RInt]
  case r of
    [[SInt bh]] -> do
      pure (fromIntegral bh)
    _ -> do
      throwM CompactExceptionNoLatestBlockHeight

getEndingTxId :: BlockHeight -> CompactM TxId
getEndingTxId bh = do
  r <- qryNoTemplateM
       "getTxId.0"
       "SELECT endingtxid FROM BlockHistory WHERE blockheight=?"
       [bhToSType bh]
       [RInt]
  case r of
    [] -> do
      throwM (CompactExceptionInvalidBlockHeight bh)
    [[SInt t]] -> do
      pure (TxId (fromIntegral t))
    _ -> do
      internalError "initialize: expected single-row int"

